require('dotenv').config(); // LU√îN ƒë·ªÉ ·ªü d√≤ng ƒë·∫ßu ti√™n
const nodemailer = require('nodemailer');

let transporter = null;

if (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {
    transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 587,            // D√πng TLS thay v√¨ SSL
        secure: false,        // false n·∫øu d√πng port 587
        auth: {
            user: process.env.GMAIL_USER,
            pass: process.env.GMAIL_APP_PASSWORD
        },
        tls: {
            rejectUnauthorized: false
        },
        debug: true
    });

    transporter.verify(function(error, success) {
        if (error) {
            console.error('L·ªói k·∫øt n·ªëi email server:', error);
        } else {
            console.log('Email server s·∫µn s√†ng');
        }
    });
} else {
    console.error('GMAIL_USER ho·∫∑c GMAIL_APP_PASSWORD ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
}

// HTML c·ªßa email x√°c nh·∫≠n ƒë∆°n h√†ng
const orderConfirmationHTML = (orderId, customerInfo) => `
    <div style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h2 style="color: #0d6efd; margin-bottom: 10px;">C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i Freshmart!</h2>
            <p style="font-size: 16px;">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
            <p style="font-size: 15px; color: #28a745;"><b>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</b></p>
            <p style="font-size: 15px; color: #ff4444;">N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá hotline: 0123456789</p>
        </div>

        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #0d6efd; font-size: 16px; margin-top: 0;">Th√¥ng tin ƒë∆°n h√†ng:</h3>
            <p style="margin: 0;"><strong>M√£ ƒë∆°n h√†ng:</strong> #${orderId}</p>
            <p style="margin: 10px 0;"><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date().toLocaleDateString('vi-VN')}</p>
        </div>

        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #0d6efd; font-size: 16px; margin-top: 0;">Th√¥ng tin ng∆∞·ªùi nh·∫≠n:</h3>
            <p style="margin: 5px 0;"><strong>H·ªç t√™n:</strong> ${customerInfo.gender === 'female' ? 'Ch·ªã' : 'Anh'} ${customerInfo.fullName}</p>
            <p style="margin: 5px 0;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${customerInfo.phone}</p>
            <p style="margin: 5px 0;"><strong>Email:</strong> ${customerInfo.email}</p>
            <h4 style="color: #0d6efd; font-size: 14px; margin: 15px 0 5px 0;">ƒê·ªãa ch·ªâ giao h√†ng:</h4>
            <p style="margin: 5px 0;"><strong>ƒê·ªãa ch·ªâ:</strong> ${customerInfo.address || customerInfo.streetAddress}</p>
            <p style="margin: 5px 0;"><strong>Ph∆∞·ªùng/X√£:</strong> ${customerInfo.wardName || 'N/A'}</p>
            <p style="margin: 5px 0;"><strong>Qu·∫≠n/Huy·ªán:</strong> ${customerInfo.districtName || 'N/A'}</p>
            <p style="margin: 5px 0;"><strong>T·ªânh/Th√†nh:</strong> ${customerInfo.provinceName || 'N/A'}</p>
            ${customerInfo.note ? `<p style="margin: 15px 0 5px 0;"><strong>Ghi ch√∫:</strong> ${customerInfo.note}</p>` : ''}
        </div>

        <div style="background: #fffbe6; padding: 18px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #ffe58f;">
            <h3 style="color: #faad14; font-size: 16px; margin-top: 0;">H∆∞·ªõng d·∫´n thanh to√°n</h3>
            <ul style="padding-left: 18px;">
                <li>Qu√Ω kh√°ch vui l√≤ng chu·∫©n b·ªã ƒë·ªß ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng (COD).</li>
                <li>Ki·ªÉm tra k·ªπ s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.</li>
                <li>N·∫øu c√≥ nhu c·∫ßu chuy·ªÉn kho·∫£n, vui l√≤ng li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n chi ti·∫øt.</li>
            </ul>
        </div>

        <div style="background: #e6fffb; padding: 18px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #87e8de;">
            <h3 style="color: #13c2c2; font-size: 16px; margin-top: 0;">∆Øu ƒë√£i d√†nh cho b·∫°n</h3>
            <ul style="padding-left: 18px;">
                <li>Nh·∫≠p m√£ <b>FRESH10</b> gi·∫£m 10% cho ƒë∆°n ti·∫øp theo.</li>
                <li>Mi·ªÖn ph√≠ giao h√†ng cho ƒë∆°n t·ª´ 500.000ƒë.</li>
            </ul>
        </div>

        <div style="border-top: 2px solid #eee; padding-top: 20px; margin-top: 20px;">
            <h3 style="color: #0d6efd; font-size: 16px;">Th√¥ng tin li√™n h·ªá h·ªó tr·ª£:</h3>
            <ul style="list-style: none; padding: 0; margin: 10px 0;">
                <li style="margin-bottom: 8px;">üìû Hotline: 0123456789</li>
                <li style="margin-bottom: 8px;">üè™ ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM</li>
                <li>‚è∞ Th·ªùi gian l√†m vi·ªác: 8:00 - 22:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)</li>
            </ul>
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid #eee;">
            <p style="color: #666; font-size: 12px; margin: 0;">
                Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.<br>
                C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Freshmart!
            </p>
        </div>
    </div>
`;

// G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
exports.sendOrderConfirmation = async (email, orderId, pdfBuffer, customerInfo) => {
    try {
        if (!transporter) {
            console.error('Kh√¥ng th·ªÉ g·ª≠i mail: transporter ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
            return;
        }

        if (!email) throw new Error('Thi·∫øu email ng∆∞·ªùi nh·∫≠n');
        if (!orderId) throw new Error('Thi·∫øu m√£ ƒë∆°n h√†ng');
        if (!customerInfo) throw new Error('Thi·∫øu th√¥ng tin kh√°ch h√†ng');

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong customerInfo
        const requiredFields = ['fullName', 'phone', 'email', 'address'];
        for (const field of requiredFields) {
            if (!customerInfo[field] && !(field === 'address' && customerInfo.streetAddress)) {
                throw new Error(`Thi·∫øu th√¥ng tin ${field} c·ªßa kh√°ch h√†ng`);
            }
        }

        customerInfo.gender = customerInfo.gender || 'male';
        customerInfo.note = customerInfo.note || '';

        const mailOptions = {
            from: `"Shop Online" <${process.env.GMAIL_USER}>`,
            to: email,
            subject: `X√°c nh·∫≠n ƒë∆°n h√†ng #${orderId}`,
            html: orderConfirmationHTML(orderId, customerInfo),
            attachments: pdfBuffer ? [
                {
                    filename: `invoice-${orderId}.pdf`,
                    content: pdfBuffer,
                    contentType: 'application/pdf'
                }
            ] : []
        };

        console.log('ƒêang g·ª≠i email ƒë·∫øn:', email);
        const info = await transporter.sendMail(mailOptions);
        console.log('Email ƒë√£ g·ª≠i th√†nh c√¥ng:', info.messageId);
        return info;
    } catch (error) {
        console.error('Chi ti·∫øt l·ªói g·ª≠i email:', {
            errorName: error.name,
            errorMessage: error.message,
            errorCode: error.code,
            errorCommand: error.command,
            errorResponse: error.response
        });
        throw new Error(`L·ªói g·ª≠i email: ${error.message}`);
    }
};

// G·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
exports.sendOrderStatus = async (email, orderId, status) => {
    try {
        if (!transporter) {
            throw new Error('Transporter ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }
        if (!email || !orderId || !status) {
            throw new Error('Thi·∫øu th√¥ng tin ƒë·ªÉ g·ª≠i email c·∫≠p nh·∫≠t');
        }

        const mailOptions = {
            from: `"Shop Online" <${process.env.GMAIL_USER}>`,
            to: email,
            subject: `C·∫≠p nh·∫≠t ƒë∆°n h√†ng #${orderId}`,
            html: `
                <div style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <h2>C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng</h2>
                    <p><strong>M√£ ƒë∆°n h√†ng:</strong> #${orderId}</p>
                    <p><strong>Tr·∫°ng th√°i m·ªõi:</strong> ${status}</p>
                    <hr>
                    <p>Hotline: 0123456789 | ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, TP.HCM</p>
                    <p style="font-size: 12px; text-align: center; color: #888;">Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông.</p>
                </div>
            `
        };

        console.log('ƒêang g·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫øn:', email);
        const info = await transporter.sendMail(mailOptions);
        console.log('Email c·∫≠p nh·∫≠t ƒë√£ g·ª≠i th√†nh c√¥ng:', info.messageId);
        return info;
    } catch (error) {
        console.error('Chi ti·∫øt l·ªói g·ª≠i email c·∫≠p nh·∫≠t:', {
            errorName: error.name,
            errorMessage: error.message,
            errorCode: error.code,
            errorCommand: error.command,
            errorResponse: error.response
        });
        throw new Error(`L·ªói g·ª≠i email c·∫≠p nh·∫≠t: ${error.message}`);
    }
};


// H√†m test g·ª≠i mail ƒë∆°n gi·∫£n

